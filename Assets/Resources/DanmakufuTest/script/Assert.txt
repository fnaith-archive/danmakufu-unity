//assert(false, "always fail");
let a = 2;
a = a + 1;
assert(3 == a, "3==a");
a += 2;
assert(5 == a, "5==a");
assert(true, "always pass");
assert(5 == 3 + 2, "+");
assert(1 == 3 - 2, "-");
assert(6 == 3 * 2, "*");
assert(1.5 == 3 / 2, "/");
assert(9 == 3 ^ 2, "^");
assert(4 == length([10, 20, 30, 40]), "length");
assert(3 == length([10, 20] ~ [30]), "length");
assert(4 == length(([10, 20] ~ [30]) ~ [40]), "length");
let b = [1];
assert(2 == length(b ~ [2]), "2==b");

let arr = [];
let size = 20;
//let j = 0;
ascent(i in 0..size)
{
    //assert(j == i, i);
    //j += 1;
    let zzz = i;
    arr = arr ~ [zzz];
    //assert(i == (i), "i"); // ???
    //assert(i+1 == length([i]), "i+1"); // ???
}
assert(size == length(arr), "length"); // 210 check case CommandKind.PC_assign:
